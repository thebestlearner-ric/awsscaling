---
# tasks file for mysql
- name: mysql | Setup
  block:
  #   
  # TODO: run docker compose and verify that docker image is working
  # edit to create a horizontal scaling mysql
  - name: Create secret file
    ansible.builtin.shell: |
      cat <<EOF > mysql-secret.yaml
      apiVersion: v1
      kind: Secret
      metadata:
        name: mysql-secret
      type: kubernetes.io/basic-auth
      stringData:
        password: test1234
      EOF
      # kubectl apply -f mysql-secret.yaml
  # - name: Apply mysql secret
  #   ansible.builtin.shell: kubectl apply -f mysql-secret.yaml
  - name: Create Storage and Volume claim
    ansible.builtin.shell: |
      cat <<EOF > mysql-storage.yaml
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: mysql-pv-volume
        labels:
          type: local
      spec:
        storageClassName: manual
        capacity:
          storage: 20Gi
        accessModes:
          - ReadWriteOnce
        hostPath:
          path: "/mnt/data"
      ---
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: mysql-pv-claim
      spec:
        storageClassName: manual
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
      EOF
      # kubectl apply -f mysql-storage.yaml
      # echo "hello"
  # - name: Apply mysql secret
  #   ansible.builtin.shell: kubectl apply -f mysql-storage.yaml
  - name: Edit {{ mysql_filename }}
    ansible.builtin.shell: |
      cat <<EOF > {{ mysql_filename }}.{{ yml_extension }}
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mysql
      spec:
        selector:
          matchLabels:
            app: mysql
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: mysql
          spec:
            containers:
            - image: mysql:5.6
              name: mysql
              env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-secret
                    key: password
              ports:
              - containerPort: 3306
                name: mysql
              volumeMounts:
              - name: mysql-persistent-storage
                mountPath: /var/lib/mysql
            volumes:
            - name: mysql-persistent-storage
              persistentVolumeClaim:
                claimName: mysql-pv-claim
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: mysql
      spec:
        ports:
        - port: 3306
        selector:
          app: mysql
      EOF
  # - name: Create sql deployment
  #   become: false
  #   ansible.builtin.shell: kubectl apply -f {{ mysql_filename }}.{{ yml_extension }}
# expose my sql 3306 
  - name: ETCD | install etcd-client
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
      allow_downgrade: yes
    vars:
      packages:
      - etcd-client
  
  #get master internet ip address
  #export to advertise_url

  - name: ETCD | take etcd snapshot
    ansible.builtin.shell: sudo ETCDCTL_API=3 etcdctl --endpoints $advertise_url --cacert /etc/kubernetes/pki/etcd/ca.crt --key /etc/kubernetes/pki/etcd/server.key --cert /etc/kubernetes/pki/etcd/server.crt snapshot status test1.db  --write-out=table

  when: "'control' in group_names"